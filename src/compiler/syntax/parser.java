
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 01 19:51:57 CEST 2025
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 01 19:51:57 CEST 2025
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\057\002\000\002\002" +
    "\004\000\002\060\002\000\002\003\012\000\002\004\004" +
    "\000\002\004\003\000\002\007\004\000\002\007\003\000" +
    "\002\011\004\000\002\011\003\000\002\013\003\000\002" +
    "\013\002\000\002\006\003\000\002\006\004\000\002\015" +
    "\010\000\002\016\003\000\002\016\003\000\002\010\003" +
    "\000\002\010\004\000\002\017\012\000\002\020\003\000" +
    "\002\020\004\000\002\021\006\000\002\012\003\000\002" +
    "\012\004\000\002\023\006\000\002\023\005\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\014\003" +
    "\000\002\014\004\000\002\024\003\000\002\024\003\000" +
    "\002\061\002\000\002\025\015\000\002\062\002\000\002" +
    "\025\014\000\002\027\005\000\002\027\003\000\002\033" +
    "\005\000\002\033\006\000\002\034\005\000\002\034\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\003\000" +
    "\002\032\007\000\002\063\002\000\002\026\013\000\002" +
    "\064\002\000\002\026\012\000\002\005\007\000\002\005" +
    "\006\000\002\035\004\000\002\035\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\040\006\000\002" +
    "\045\003\000\002\045\003\000\002\041\011\000\002\041" +
    "\013\000\002\042\011\000\002\037\007\000\002\050\003" +
    "\000\002\050\003\000\002\043\005\000\002\044\004\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\005\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\053\003\000\002\053\003\000\002\054\003\000" +
    "\002\054\003\000\002\052\003\000\002\047\005\000\002" +
    "\047\005\000\002\051\006\000\002\051\005\000\002\056" +
    "\003\000\002\056\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\034\000\001\002\000\004\002\310\001" +
    "\002\000\004\034\006\001\002\000\004\024\010\001\002" +
    "\000\004\002\uffff\001\002\000\004\012\ufffe\001\002\000" +
    "\004\012\012\001\002\000\004\013\013\001\002\000\004" +
    "\037\014\001\002\000\014\024\031\034\015\036\023\044" +
    "\ufff5\047\026\001\002\000\004\024\273\001\002\000\014" +
    "\024\165\034\015\036\023\044\ufff5\047\026\001\002\000" +
    "\004\044\ufff7\001\002\000\004\044\ufff9\001\002\000\004" +
    "\044\ufffb\001\002\000\014\024\ufff4\034\ufff4\036\ufff4\044" +
    "\ufff4\047\ufff4\001\002\000\004\024\225\001\002\000\010" +
    "\034\uffe0\036\uffe0\044\uffe0\001\002\000\012\024\uffe9\034" +
    "\uffe9\036\uffe9\044\uffe9\001\002\000\004\024\210\001\002" +
    "\000\010\034\015\036\023\044\ufff6\001\002\000\010\034" +
    "\uffe2\036\uffe2\044\uffe2\001\002\000\006\016\167\020\200" +
    "\001\002\000\014\024\031\034\015\036\023\044\ufff5\047" +
    "\026\001\002\000\012\024\165\034\015\036\023\044\ufff5" +
    "\001\002\000\010\034\uffdf\036\uffdf\044\uffdf\001\002\000" +
    "\004\044\040\001\002\000\014\024\uffef\034\uffef\036\uffef" +
    "\044\uffef\047\uffef\001\002\000\004\002\ufffd\001\002\000" +
    "\016\024\060\027\042\030\041\032\053\033\047\043\054" +
    "\001\002\000\012\012\071\021\066\022\065\024\075\001" +
    "\002\000\004\012\147\001\002\000\020\024\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\043\uffc7\001\002\000" +
    "\004\010\144\001\002\000\020\024\060\027\042\030\041" +
    "\031\uffc9\032\053\033\047\043\uffc9\001\002\000\020\024" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\043\uffc8" +
    "\001\002\000\012\012\071\021\066\022\065\024\075\001" +
    "\002\000\020\024\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\043\uffc4\001\002\000\020\024\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\043\uffc5\001\002\000\004" +
    "\017\127\001\002\000\012\012\071\021\066\022\065\024" +
    "\075\001\002\000\004\024\123\001\002\000\004\043\120" +
    "\001\002\000\004\010\uffc0\001\002\000\020\024\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\043\uffc3\001\002" +
    "\000\010\010\uffc1\011\062\012\063\001\002\000\020\024" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\043\uffc6" +
    "\001\002\000\004\024\116\001\002\000\014\012\071\013" +
    "\064\021\066\022\065\024\075\001\002\000\026\004\uffa5" +
    "\005\uffa5\006\uffa5\007\uffa5\013\uffa5\016\uffa5\017\uffa5\026" +
    "\uffa5\040\uffa5\045\uffa5\001\002\000\026\004\uffb0\005\uffb0" +
    "\006\uffb0\007\uffb0\013\uffb0\016\uffb0\017\uffb0\026\uffb0\040" +
    "\uffb0\045\uffb0\001\002\000\026\004\uffae\005\uffae\006\uffae" +
    "\007\uffae\013\uffae\016\uffae\017\uffae\026\uffae\040\uffae\045" +
    "\uffae\001\002\000\004\013\115\001\002\000\020\004\103" +
    "\005\100\006\105\007\106\013\uffa4\016\113\026\101\001" +
    "\002\000\012\012\071\021\066\022\065\024\075\001\002" +
    "\000\026\004\uffb2\005\uffb2\006\uffb2\007\uffb2\013\uffb2\016" +
    "\uffb2\017\uffb2\026\uffb2\040\uffb2\045\uffb2\001\002\000\026" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\013\uffb3\016\uffb3\017" +
    "\uffb3\026\uffb3\040\uffb3\045\uffb3\001\002\000\026\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\013\uffb4\016\uffb4\017\uffb4\026" +
    "\uffb4\040\uffb4\045\uffb4\001\002\000\032\004\uffaf\005\uffaf" +
    "\006\uffaf\007\uffaf\011\062\012\063\013\uffaf\016\uffaf\017" +
    "\uffaf\026\uffaf\040\uffaf\045\uffaf\001\002\000\016\004\103" +
    "\005\100\006\105\007\106\013\077\026\101\001\002\000" +
    "\026\004\uffb1\005\uffb1\006\uffb1\007\uffb1\013\uffb1\016\uffb1" +
    "\017\uffb1\026\uffb1\040\uffb1\045\uffb1\001\002\000\012\012" +
    "\uffab\021\uffab\022\uffab\024\uffab\001\002\000\012\012\uffa9" +
    "\021\uffa9\022\uffa9\024\uffa9\001\002\000\012\012\071\021" +
    "\066\022\065\024\075\001\002\000\012\012\uffaa\021\uffaa" +
    "\022\uffaa\024\uffaa\001\002\000\012\012\071\021\066\022" +
    "\065\024\075\001\002\000\012\012\uffac\021\uffac\022\uffac" +
    "\024\uffac\001\002\000\012\012\uffad\021\uffad\022\uffad\024" +
    "\uffad\001\002\000\012\012\071\021\066\022\065\024\075" +
    "\001\002\000\026\004\103\005\100\006\105\007\106\013" +
    "\uffb5\016\uffb5\017\uffb5\026\101\040\uffb5\045\uffb5\001\002" +
    "\000\026\004\103\005\100\006\105\007\106\013\uffb7\016" +
    "\uffb7\017\uffb7\026\101\040\uffb7\045\uffb7\001\002\000\026" +
    "\004\103\005\100\006\105\007\106\013\uffb6\016\uffb6\017" +
    "\uffb6\026\101\040\uffb6\045\uffb6\001\002\000\012\012\071" +
    "\021\066\022\065\024\075\001\002\000\004\013\uffa3\001" +
    "\002\000\026\004\uffa6\005\uffa6\006\uffa6\007\uffa6\013\uffa6" +
    "\016\uffa6\017\uffa6\026\uffa6\040\uffa6\045\uffa6\001\002\000" +
    "\032\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\062" +
    "\013\uffa8\016\uffa8\017\uffa8\026\uffa8\040\uffa8\045\uffa8\001" +
    "\002\000\030\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7" +
    "\013\uffa7\016\uffa7\017\uffa7\026\uffa7\040\uffa7\045\uffa7\001" +
    "\002\000\004\024\121\001\002\000\004\017\122\001\002" +
    "\000\012\002\uffcc\034\uffcc\036\uffcc\044\uffcc\001\002\000" +
    "\004\017\124\001\002\000\012\002\uffcb\034\uffcb\036\uffcb" +
    "\044\uffcb\001\002\000\016\004\103\005\100\006\105\007" +
    "\106\017\126\026\101\001\002\000\020\024\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\043\uffb9\001\002\000" +
    "\020\024\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\043\uffb8\001\002\000\016\004\103\005\100\006\105\007" +
    "\106\026\101\040\131\001\002\000\014\024\060\027\042" +
    "\030\041\032\053\033\047\001\002\000\006\031\133\043" +
    "\134\001\002\000\014\024\060\027\042\030\041\032\053" +
    "\033\047\001\002\000\004\033\135\001\002\000\004\017" +
    "\136\001\002\000\020\024\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\043\uffbf\001\002\000\004\043\140\001" +
    "\002\000\004\033\141\001\002\000\004\017\142\001\002" +
    "\000\020\024\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\043\uffbe\001\002\000\006\031\uffca\043\uffca\001\002" +
    "\000\012\012\071\021\066\022\065\024\075\001\002\000" +
    "\016\004\103\005\100\006\105\007\106\017\146\026\101" +
    "\001\002\000\020\024\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\043\uffc2\001\002\000\014\012\071\021\066" +
    "\022\065\023\150\024\075\001\002\000\004\013\uffba\001" +
    "\002\000\004\013\153\001\002\000\016\004\103\005\100" +
    "\006\105\007\106\013\uffbb\026\101\001\002\000\004\017" +
    "\154\001\002\000\020\024\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\043\uffbc\001\002\000\016\004\103\005" +
    "\100\006\105\007\106\026\101\045\156\001\002\000\014" +
    "\024\060\027\042\030\041\032\053\033\047\001\002\000" +
    "\004\043\160\001\002\000\004\045\161\001\002\000\004" +
    "\017\162\001\002\000\020\024\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\043\uffbd\001\002\000\012\024\uffe8" +
    "\034\uffe8\036\uffe8\044\uffe8\001\002\000\004\044\ufff8\001" +
    "\002\000\006\016\167\020\166\001\002\000\010\024\173" +
    "\041\171\042\174\001\002\000\004\024\165\001\002\000" +
    "\012\024\uffe6\034\uffe6\036\uffe6\044\uffe6\001\002\000\006" +
    "\013\uffe5\017\uffe5\001\002\000\004\017\175\001\002\000" +
    "\006\013\uffe3\017\uffe3\001\002\000\006\013\uffe4\017\uffe4" +
    "\001\002\000\012\024\uffe7\034\uffe7\036\uffe7\044\uffe7\001" +
    "\002\000\014\024\ufff3\034\ufff3\036\ufff3\044\ufff3\047\ufff3" +
    "\001\002\000\004\044\ufffc\001\002\000\012\024\173\025" +
    "\201\041\171\042\174\001\002\000\004\010\202\001\002" +
    "\000\006\021\205\022\204\001\002\000\004\017\206\001" +
    "\002\000\004\017\ufff0\001\002\000\004\017\ufff1\001\002" +
    "\000\014\024\ufff2\034\ufff2\036\ufff2\044\ufff2\047\ufff2\001" +
    "\002\000\010\034\uffe1\036\uffe1\044\uffe1\001\002\000\004" +
    "\037\211\001\002\000\004\035\212\001\002\000\004\024" +
    "\213\001\002\000\004\020\222\001\002\000\006\024\213" +
    "\043\217\001\002\000\006\024\uffec\043\uffec\001\002\000" +
    "\006\024\uffeb\043\uffeb\001\002\000\004\035\220\001\002" +
    "\000\004\017\221\001\002\000\014\024\uffed\034\uffed\036" +
    "\uffed\044\uffed\047\uffed\001\002\000\010\024\173\041\171" +
    "\042\174\001\002\000\004\017\224\001\002\000\006\024" +
    "\uffea\043\uffea\001\002\000\004\012\226\001\002\000\006" +
    "\013\233\024\231\001\002\000\004\013\262\001\002\000" +
    "\004\020\256\001\002\000\006\016\254\020\uffd5\001\002" +
    "\000\006\013\uffd9\017\252\001\002\000\004\032\234\001" +
    "\002\000\006\041\235\042\237\001\002\000\004\037\uffd4" +
    "\001\002\000\004\037\240\001\002\000\004\037\uffd3\001" +
    "\002\000\014\024\uffdc\034\uffdc\036\uffdc\044\uffdc\047\uffdc" +
    "\001\002\000\014\024\165\034\015\036\023\044\ufff5\047" +
    "\026\001\002\000\004\044\245\001\002\000\004\044\uffd2" +
    "\001\002\000\010\034\uffdb\036\uffdb\044\uffdb\001\002\000" +
    "\014\024\060\027\042\030\041\032\053\033\047\001\002" +
    "\000\004\043\247\001\002\000\004\024\250\001\002\000" +
    "\004\017\251\001\002\000\010\034\uffd1\036\uffd1\044\uffd1" +
    "\001\002\000\004\024\231\001\002\000\004\013\uffda\001" +
    "\002\000\004\024\231\001\002\000\004\020\uffd6\001\002" +
    "\000\012\024\173\041\171\042\174\046\257\001\002\000" +
    "\010\024\173\041\171\042\174\001\002\000\006\013\uffd8" +
    "\017\uffd8\001\002\000\006\013\uffd7\017\uffd7\001\002\000" +
    "\004\032\263\001\002\000\006\041\235\042\237\001\002" +
    "\000\004\037\265\001\002\000\014\024\uffde\034\uffde\036" +
    "\uffde\044\uffde\047\uffde\001\002\000\014\024\165\034\015" +
    "\036\023\044\ufff5\047\026\001\002\000\004\044\245\001" +
    "\002\000\010\034\uffdd\036\uffdd\044\uffdd\001\002\000\004" +
    "\044\ufffa\001\002\000\014\024\uffee\034\uffee\036\uffee\044" +
    "\uffee\047\uffee\001\002\000\004\012\274\001\002\000\006" +
    "\013\276\024\231\001\002\000\004\013\303\001\002\000" +
    "\004\037\277\001\002\000\014\024\uffce\034\uffce\036\uffce" +
    "\044\uffce\047\uffce\001\002\000\014\024\165\034\015\036" +
    "\023\044\ufff5\047\026\001\002\000\004\044\040\001\002" +
    "\000\010\034\uffcd\036\uffcd\044\uffcd\001\002\000\004\037" +
    "\304\001\002\000\014\024\uffd0\034\uffd0\036\uffd0\044\uffd0" +
    "\047\uffd0\001\002\000\014\024\165\034\015\036\023\044" +
    "\ufff5\047\026\001\002\000\004\044\040\001\002\000\010" +
    "\034\uffcf\036\uffcf\044\uffcf\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\006\002\003\057\004\001\001\000\002\001" +
    "\001\000\004\003\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\034\006\031" +
    "\007\020\010\015\011\017\012\032\013\016\014\026\015" +
    "\021\017\035\023\024\024\027\025\023\026\033\001\001" +
    "\000\002\001\001\000\024\011\270\012\032\013\016\014" +
    "\026\017\271\023\024\024\027\025\023\026\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\206\025\023\026" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\176\010\015\011\017\012\032\013\016\014\026\015" +
    "\175\017\035\023\024\024\027\025\023\026\033\001\001" +
    "\000\016\013\163\014\026\023\162\024\027\025\023\026" +
    "\033\001\001\000\002\001\001\000\004\005\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\035\054\036" +
    "\044\037\045\040\042\041\060\042\050\043\047\044\056" +
    "\045\043\047\055\051\051\001\001\000\012\046\154\047" +
    "\073\051\072\055\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\035\142\036\044\037" +
    "\045\040\042\041\060\042\050\043\047\044\056\045\043" +
    "\047\055\051\051\001\001\000\002\001\001\000\012\046" +
    "\127\047\073\051\072\055\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\046\124\047" +
    "\073\051\072\055\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\116\001\001\000\014" +
    "\046\067\047\073\051\072\055\071\056\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\052\103\053\101\054\106\001\001\000" +
    "\012\046\075\047\073\051\072\055\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\052\103\053\101\054\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\046" +
    "\111\047\073\051\072\055\071\001\001\000\002\001\001" +
    "\000\012\046\110\047\073\051\072\055\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\046\107\047\073" +
    "\051\072\055\071\001\001\000\010\052\103\053\101\054" +
    "\106\001\001\000\010\052\103\053\101\054\106\001\001" +
    "\000\010\052\103\053\101\054\106\001\001\000\014\046" +
    "\067\047\073\051\072\055\071\056\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\052\103\053" +
    "\101\054\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\052\103\053\101\054\106\001\001\000\030\035" +
    "\131\036\044\037\045\040\042\041\060\042\050\043\047" +
    "\044\056\045\043\047\055\051\051\001\001\000\002\001" +
    "\001\000\030\035\136\036\044\037\045\040\042\041\060" +
    "\042\050\043\047\044\056\045\043\047\055\051\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\046\144\047\073" +
    "\051\072\055\071\001\001\000\010\052\103\053\101\054" +
    "\106\001\001\000\002\001\001\000\014\046\151\047\073" +
    "\050\150\051\072\055\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\052\103\053\101\054\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\052\103\053" +
    "\101\054\106\001\001\000\030\035\156\036\044\037\045" +
    "\040\042\041\060\042\050\043\047\044\056\045\043\047" +
    "\055\051\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\171\001\001" +
    "\000\004\023\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\171\001\001\000\002\001\001\000\004\016\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\213\021\214\001\001\000" +
    "\002\001\001\000\004\021\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\226\033" +
    "\231\034\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\240\001\001\000\032\007" +
    "\242\010\015\011\017\012\032\013\016\014\026\017\035" +
    "\023\024\024\027\025\023\026\033\031\241\001\001\000" +
    "\004\032\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\035\245\036\044\037\045\040\042\041\060\042" +
    "\050\043\047\044\056\045\043\047\055\051\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\027\252\033\231\034\227\001\001" +
    "\000\002\001\001\000\004\034\254\001\001\000\002\001" +
    "\001\000\004\022\257\001\001\000\004\022\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\263\001\001\000\002\001\001\000\004\061\265" +
    "\001\001\000\032\007\242\010\015\011\017\012\032\013" +
    "\016\014\026\017\035\023\024\024\027\025\023\026\033" +
    "\031\266\001\001\000\004\032\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\274\033\231\034\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\277\001\001\000\032" +
    "\007\242\010\015\011\017\012\032\013\016\014\026\017" +
    "\035\023\024\024\027\025\023\026\033\031\300\001\001" +
    "\000\004\005\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\304\001\001\000\032\007\242\010\015" +
    "\011\017\012\032\013\016\014\026\017\035\023\024\024" +
    "\027\025\023\026\033\031\305\001\001\000\004\005\306" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();
	List<QuadrupleIF> listaCadenas = new ArrayList<QuadrupleIF>();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // listaParametrosInvocacion ::= expresion DELIMLISTA listaParametrosInvocacion 
            {
              ListaParametrosInvocacion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaParametrosInvocacion lpi = (ListaParametrosInvocacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = ListaParametrosInvocacion.semantico_2(e.getTipo(),lpi);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametrosInvocacion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // listaParametrosInvocacion ::= expresion 
            {
              ListaParametrosInvocacion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = ListaParametrosInvocacion.semantico_1(e.getTipo());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametrosInvocacion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exprFuncion ::= IDENTIFICADOR PARENTESISAP PARENTESISCIERRE 
            {
              ExprFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT = ExprFuncion.semantico(scopeManager, semanticErrorManager, new ListaParametrosInvocacion(), id.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exprFuncion ::= IDENTIFICADOR PARENTESISAP listaParametrosInvocacion PARENTESISCIERRE 
            {
              ExprFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaParametrosInvocacion lpi = (ListaParametrosInvocacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = ExprFuncion.semantico(scopeManager, semanticErrorManager, lpi, id.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresionAccesoRegistro ::= IDENTIFICADOR ACCESO expresionAccesoRegistro 
            {
              ExpresionAccesoRegistro RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int earleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAccesoRegistro ear = (ExpresionAccesoRegistro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = ExpresionAccesoRegistro.semantico_2(scopeManager,semanticErrorManager,id.getLexema(),ear);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAccesoRegistro",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresionAccesoRegistro ::= IDENTIFICADOR ACCESO IDENTIFICADOR 
            {
              ExpresionAccesoRegistro RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = ExpresionAccesoRegistro.semantico_1(scopeManager,semanticErrorManager,id1.getLexema(),id2.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAccesoRegistro",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operadorLogico ::= AND 
            {
              OperadorLogico RESULT =null;
		
	RESULT = OperadorLogico.semantico("AND");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operadorAritmetico ::= MULT 
            {
              OperadorAritmetico RESULT =null;
		
	RESULT = OperadorAritmetico.semantico("MUL");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operadorAritmetico ::= MINUS 
            {
              OperadorAritmetico RESULT =null;
		
	RESULT = OperadorAritmetico.semantico("SUB");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operadorRelacional ::= MAYOR 
            {
              OperadorRelacional RESULT =null;
		
							RESULT = OperadorRelacional.semantico("GR");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operadorRelacional ::= DISTINTO 
            {
              OperadorRelacional RESULT =null;
		
							RESULT = OperadorRelacional.semantico("NQ");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operando ::= ENTERO 
            {
              Operando RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = Operando.semantico_entero(scopeManager, semanticErrorManager, s.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operando ::= IDENTIFICADOR 
            {
              Operando RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = Operando.semantico_identificador(scopeManager,semanticErrorManager,s.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operando ::= BOOLEANO 
            {
              Operando RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = Operando.semantico_booleano(scopeManager,semanticErrorManager,s.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= PARENTESISAP expresion PARENTESISCIERRE 
            {
              Expresion RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = Expresion.semantico_expresion(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= operando 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operando op = (Operando)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = Expresion.semantico_operando(op);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= exprFuncion 
            {
              Expresion RESULT =null;
		int exfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprFuncion exf = (ExprFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = Expresion.semantico_exprFuncion(exf);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresionAccesoRegistro 
            {
              Expresion RESULT =null;
		int earleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAccesoRegistro ear = (ExpresionAccesoRegistro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = Expresion.semantico_expresionAccesoRegistro(scopeManager,semanticErrorManager,ear);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion operadorAritmetico expresion 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorAritmetico op = (OperadorAritmetico)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = Expresion.semantico_operadorAritmetico(scopeManager,semanticErrorManager,ex1,ex2,op.getTipoOperador());
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion operadorRelacional expresion 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorRelacional op = (OperadorRelacional)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = Expresion.semantico_operadorRelacional(scopeManager,semanticErrorManager,ex1,ex2,op.getTipoOperador());
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion operadorLogico expresion 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorLogico op = (OperadorLogico)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = Expresion.semantico_operadorLogico(scopeManager,semanticErrorManager,ex1,ex2,op.getTipoOperador());
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentenciaProcedimiento ::= exprFuncion DELIMPUNTOCOMA 
            {
              SentenciaProcedimiento RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprFuncion expr = (ExprFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = SentenciaProcedimiento.semantico(expr);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaProcedimiento",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentenciaReturn ::= RETURN expresion DELIMPUNTOCOMA 
            {
              SentenciaReturn RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = SentenciaReturn.semantico(scopeManager, expr);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturn",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametro ::= CADENACARACTERES 
            {
              Parametro RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = Parametro.semantico_cadena(c.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametro ::= expresion 
            {
              Parametro RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = Parametro.semantico_expresion(e);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentenciaPutLine ::= PUTLINE PARENTESISAP parametro PARENTESISCIERRE DELIMPUNTOCOMA 
            {
              SentenciaPutLine RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT = SentenciaPutLine.semantico(scopeManager, semanticErrorManager, listaCadenas, p);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaPutLine",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaWhile ::= WHILE expresion LOOP sentencias END LOOP DELIMPUNTOCOMA 
            {
              SentenciaWhile RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
	RESULT = SentenciaWhile.semantico(scopeManager,semanticErrorManager,e,s);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaIf ::= IF expresion THEN sentencias ELSE sentencias END IF DELIMPUNTOCOMA 
            {
              SentenciaIF RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Sentencias s1 = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencias s2 = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
					RESULT = SentenciaIF.semantico(scopeManager, semanticErrorManager, e, s1,s2);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentenciaIf ::= IF expresion THEN sentencias END IF DELIMPUNTOCOMA 
            {
              SentenciaIF RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencias s1 = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
					RESULT = SentenciaIF.semantico(scopeManager, semanticErrorManager, e, s1,null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ref ::= expresionAccesoRegistro 
            {
              Ref RESULT =null;
		int earleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAccesoRegistro ear = (ExpresionAccesoRegistro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = Ref.semantico_2(scopeManager, semanticErrorManager, ear);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ref ::= IDENTIFICADOR 
            {
              Ref RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = Ref.semantico_1(scopeManager, semanticErrorManager, id.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentenciaAsignacion ::= ref ASIGNACION expresion DELIMPUNTOCOMA 
            {
              SentenciaAsignacion RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ref ref = (Ref)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = SentenciaAsignacion.semantico(scopeManager, semanticErrorManager, ref, ex);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia ::= sentenciaProcedimiento 
            {
              Sentencia RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaProcedimiento sp = (SentenciaProcedimiento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = Sentencia.semantico_procedimiento(sp,scopeManager.getCurrentScope());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia ::= sentenciaReturn 
            {
              Sentencia RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaReturn sr = (SentenciaReturn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = Sentencia.semantico_return(sr,scopeManager.getCurrentScope());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia ::= sentenciaWhile 
            {
              Sentencia RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaWhile sw = (SentenciaWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = Sentencia.semantico_while(sw,scopeManager.getCurrentScope());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia ::= sentenciaIf 
            {
              Sentencia RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaIF si = (SentenciaIF)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = Sentencia.semantico_if(si,scopeManager.getCurrentScope());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= sentenciaAsignacion 
            {
              Sentencia RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaAsignacion sa = (SentenciaAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = Sentencia.semantico_asignacion(sa,scopeManager.getCurrentScope());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia ::= sentenciaPutLine 
            {
              Sentencia RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaPutLine sp = (SentenciaPutLine)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = Sentencia.semantico_putline(sp,scopeManager.getCurrentScope());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencias ::= sentencia 
            {
              Sentencias RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = Sentencias.semantico_2(scopeManager, s);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencias ::= sentencia sentencias 
            {
              Sentencias RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencias sent = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = Sentencias.semantico_1(scopeManager, s, sent);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpo ::= BEGIN END IDENTIFICADOR DELIMPUNTOCOMA 
            {
              Cuerpo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = Cuerpo.semantico(null, id.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpo ::= BEGIN sentencias END IDENTIFICADOR DELIMPUNTOCOMA 
            {
              Cuerpo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = Cuerpo.semantico(s, id.getLexema());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declProcedimiento ::= PROCEDURE IDENTIFICADOR PARENTESISAP PARENTESISCIERRE IS NT$5 declaracionesFunction cuerpo 
            {
              DeclProcedimiento RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (DeclProcedimiento) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							c.comprobarIdEnd(scopeManager, semanticErrorManager);
							scopeManager.closeScope();
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declProcedimiento",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$5 ::= 
            {
              DeclProcedimiento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

							RESULT = DeclProcedimiento.semantico_2(scopeManager, semanticErrorManager, id.getLexema());
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declProcedimiento ::= PROCEDURE IDENTIFICADOR PARENTESISAP declParametros PARENTESISCIERRE IS NT$4 declaracionesFunction cuerpo 
            {
              DeclProcedimiento RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (DeclProcedimiento) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclParametros dp = (DeclParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							c.comprobarIdEnd(scopeManager, semanticErrorManager);
							scopeManager.closeScope();
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declProcedimiento",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$4 ::= 
            {
              DeclProcedimiento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclParametros dp = (DeclParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

						RESULT = DeclProcedimiento.semantico_1(scopeManager, semanticErrorManager, dp, id.getLexema());
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpoFunction ::= BEGIN sentencias END IDENTIFICADOR DELIMPUNTOCOMA 
            {
              CuerpoFunction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = CuerpoFunction.semantico(s, id.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFunction",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracionesFunction ::= grupoDeclaraciones1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesFunction",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipoRetorno ::= BOOLEAN 
            {
              TipoRetorno RESULT =null;
		
	RESULT = TipoRetorno.semantico("BOOLEANO");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRetorno",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipoRetorno ::= INTEGER 
            {
              TipoRetorno RESULT =null;
		
	RESULT = TipoRetorno.semantico("ENTERO");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRetorno",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listaParametros ::= IDENTIFICADOR 
            {
              ListaParametros RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = ListaParametros.semantico_2(id.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listaParametros ::= IDENTIFICADOR DELIMLISTA listaParametros 
            {
              ListaParametros RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaParametros lp = (ListaParametros)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = ListaParametros.semantico_1(lp,id.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declParametro ::= listaParametros DELIMTIPO OUT tipo 
            {
              DeclParametro RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ListaParametros lp = (ListaParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo tp = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = DeclParametro.semantico_referencia(lp, tp);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declParametro",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declParametro ::= listaParametros DELIMTIPO tipo 
            {
              DeclParametro RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaParametros lp = (ListaParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo tp = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = DeclParametro.semantico_copia(lp, tp);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declParametro",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declParametros ::= declParametro 
            {
              DeclParametros RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclParametro dp = (DeclParametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = DeclParametros.semantico_2(dp);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declParametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declParametros ::= declParametro DELIMPUNTOCOMA declParametros 
            {
              DeclParametros RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclParametro dp = (DeclParametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclParametros dps = (DeclParametros)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = DeclParametros.semantico_1(dps, dp);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declParametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declFunction ::= FUNCTION IDENTIFICADOR PARENTESISAP PARENTESISCIERRE RETURN tipoRetorno IS NT$3 declaracionesFunction cuerpoFunction 
            {
              DeclFunction RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (DeclFunction) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TipoRetorno t = (TipoRetorno)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CuerpoFunction c = (CuerpoFunction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						c.comprobarIdEnd(scopeManager,semanticErrorManager);
						c.comprobarReturns(scopeManager,semanticErrorManager);
						scopeManager.closeScope();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declFunction",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$3 ::= 
            {
              DeclFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoRetorno t = (TipoRetorno)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						RESULT = DeclFunction.semantico_sinParametros(scopeManager, semanticErrorManager, id.getLexema(), t.getTipo());
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declFunction ::= FUNCTION IDENTIFICADOR PARENTESISAP declParametros PARENTESISCIERRE RETURN tipoRetorno IS NT$2 declaracionesFunction cuerpoFunction 
            {
              DeclFunction RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (DeclFunction) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		DeclParametros dps = (DeclParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TipoRetorno t = (TipoRetorno)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CuerpoFunction c = (CuerpoFunction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						c.comprobarIdEnd(scopeManager,semanticErrorManager);
						c.comprobarReturns(scopeManager,semanticErrorManager);
						scopeManager.closeScope();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declFunction",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$2 ::= 
            {
              DeclFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclParametros dps = (DeclParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoRetorno t = (TipoRetorno)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

						RESULT = DeclFunction.semantico_parametros(scopeManager, semanticErrorManager, id.getLexema(), dps, t.getTipo());
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declSubprograma ::= declProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSubprograma",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declSubprograma ::= declFunction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSubprograma",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declSubprogramas ::= declSubprogramas declSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSubprogramas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declSubprogramas ::= declSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSubprogramas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo ::= IDENTIFICADOR 
            {
              Tipo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = Tipo.semantico(i.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		
	RESULT = Tipo.semantico("BOOLEANO");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo ::= INTEGER 
            {
              Tipo RESULT =null;
		
	RESULT = Tipo.semantico("ENTERO");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declVariable ::= IDENTIFICADOR DELIMLISTA declVariable 
            {
              DeclVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclVariable dv = (DeclVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
	RESULT = DeclVariable.semantico_2(scopeManager, id.getLexema(), semanticErrorManager, dv);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declVariable",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declVariable ::= IDENTIFICADOR DELIMTIPO tipo DELIMPUNTOCOMA 
            {
              DeclVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tp = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = DeclVariable.semantico_1(scopeManager, id.getLexema(), semanticErrorManager, tp);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declVariable",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declVariables ::= declVariables declVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declVariables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declVariables ::= declVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declVariables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declCampo ::= IDENTIFICADOR DELIMTIPO tipo DELIMPUNTOCOMA 
            {
              DeclCampo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = DeclCampo.semantico(scopeManager, semanticErrorManager, id.getLexema(), t.getTipo());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declCampo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declCampos ::= declCampos declCampo 
            {
              DeclCampos RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclCampos dc = (DeclCampos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclCampo c = (DeclCampo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = DeclCampos.semantico_2(semanticErrorManager,dc, c);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declCampos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declCampos ::= declCampo 
            {
              DeclCampos RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclCampo c = (DeclCampo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = DeclCampos.semantico_1(c);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declCampos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declTipo ::= TYPE IDENTIFICADOR IS RECORD declCampos END RECORD DELIMPUNTOCOMA 
            {
              DeclTipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclCampos dc = (DeclCampos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
	RESULT = DeclTipo.semantico(scopeManager, semanticErrorManager, id.getLexema(), dc);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declTipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declTipos ::= declTipos declTipo 
            {
              DeclTipos RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclTipos dt = (DeclTipos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclTipo d = (DeclTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = DeclTipos.semantico(d);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declTipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declTipos ::= declTipo 
            {
              DeclTipos RESULT =null;
		
	RESULT = DeclTipos.semantico();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declTipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= BOOLEANO 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = Literal.semantico_booleano(b.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= ENTERO 
            {
              Literal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = Literal.semantico_entero(e.getLexema());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constante ::= IDENTIFICADOR DELIMTIPO CONSTANT ASIGNACION literal DELIMPUNTOCOMA 
            {
              Constante RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Literal lit = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = Constante.semantico(scopeManager, semanticErrorManager, id.getLexema(), lit);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declConstantes ::= declConstantes constante 
            {
              DeclConstantes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declConstantes ::= constante 
            {
              DeclConstantes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // grupoDeclaraciones3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // grupoDeclaraciones3 ::= declSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // grupoDeclaraciones2 ::= grupoDeclaraciones3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // grupoDeclaraciones2 ::= declVariables grupoDeclaraciones3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // grupoDeclaraciones1 ::= grupoDeclaraciones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // grupoDeclaraciones1 ::= declTipos grupoDeclaraciones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= grupoDeclaraciones1 
            {
              Declaraciones RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declConstantes grupoDeclaraciones1 
            {
              Declaraciones RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= PROCEDURE IDENTIFICADOR NT$1 PARENTESISAP PARENTESISCIERRE IS declaraciones cuerpo 
            {
              Axiom RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Axiom) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaraciones d = (Declaraciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				c.comprobarIdEnd(scopeManager, semanticErrorManager);
				RESULT = Axiom1.intermediateCode(scopeManager.getCurrentScope(),listaCadenas,d,c);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Axiom RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

				String nombre = id.getLexema();
				scopeManager.openScope(nombre);
				ScopeIF scope = scopeManager.getCurrentScope();
				TypeTableIF typeTable = scope.getTypeTable();
				TypeSimple tsEntero = new TypeSimple(scope,"ENTERO");
				typeTable.addType("ENTERO", tsEntero);
				TypeSimple tsBooleano = new TypeSimple(scope,"BOOLEANO");
				typeTable.addType("BOOLEANO",tsBooleano);
				//crear simbolo y tipo de proceso principal
				SymbolTableIF tablaSimbolos = scope.getSymbolTable();
				TypeProcedure mainProceso = new TypeProcedure(scope,id.getLexema(),new ArrayList());
				typeTable.addType(id.getLexema(),mainProceso);
				tablaSimbolos.addSymbol(new SymbolProcedure(scope,id.getLexema(),mainProceso,new ArrayList()));
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
		System.out.println("Código intermedio axioma: "+ax.getIntermediateCode());
  		// En caso de no comentarse las dos sentencias anteriores se puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
  		
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

